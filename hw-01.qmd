---
title: "HW 01"
author: "Yashi Mi"
format: 
  html:
    embed-resources: true
execute: 
  warning: false
  message: false
  error: false
toc: true
---

## 0 - Setup

```{r setup}
if (!require("pacman")) 
  install.packages("pacman")

# use this line for installing/loading
pacman::p_load (tidyverse,
              palmerpenguins )

devtools::install_github("tidyverse/dsbox")

library(here)
```

## 1 - Road traffic accidents in Edinburgh

```{r label-me-1}
accidents <- read_csv(here("data","accidents.csv"))
glimpse(accidents)
```

```{r}
accidents <- accidents |>
  mutate(day_type = case_when(
    day_of_week %in% c("Saturday", "Sunday") ~ "Weekend",
    day_of_week %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday") ~ "Weekday",
    TRUE ~ as.character(day_of_week)))
ggplot(accidents, aes(x = time, fill = severity)) +
  geom_density(alpha=0.6) +
  facet_wrap(~day_type, ncol=1) +
  scale_fill_manual("Severity", values = c("#8E6C8A", "#5E9CA0", "#F4E04D")) +
  labs(title = "Number of accidents throughout the day",
    subtitle = "By day of week and severity",
    x = "Time of day",
    y = "Density") +
  theme_minimal(base_size = 14)
```

::: callout-note
The figure illustrates the distribution of road traffic accidents in Edinburgh across different times of day, separated by weekday and weekend, and categorized by severity (Fatal, Serious, Slight).

On weekdays, the number of serious and slight accidents peaks between 16:00 and 18:00, likely corresponding to evening rush hours. Fatal accidents show a smaller peak around midday (12:00).

On weekends, the number of slight accidents also peaks around 16:00, but serious accidents tend to peak slightly later, between 18:00 and 20:00. Notably, there are no fatal accidents reported on weekends in this dataset.
:::

## 2 - NYC marathon winners

```{r label-me-2}
nyc_marathon <- read_csv(here("data","nyc_marathon.csv"))
glimpse(nyc_marathon)
```

```{r}
nyc_marathon_clean <- nyc_marathon |>
  filter(!is.na(time_hrs))

ggplot(nyc_marathon_clean, aes(x = time_hrs))+
  geom_histogram(binwidth = 0.0625)+
   labs(x = "Finishing Time (hours)",
    y = "Count" )+
    theme_minimal(base_size = 14)

ggplot(nyc_marathon_clean, aes(y = time_hrs))+
  geom_boxplot()+
   labs(y = "Finishing Time (hours)" )+
    theme_minimal(base_size = 14)

```

::: callout-note
The histogram shows the overall distribution of finishing times for all marathon runners, making it easier to observe the frequency of different time intervals. In contrast, the box plot summarizes key statistics such as the median, interquartile range, and potential outliers.
:::

```{r}
ggplot(nyc_marathon_clean, aes(x = division,y = time_hrs, fill = division))+
  geom_boxplot()+
  scale_fill_manual(values = c("Blue","Red"))+
   labs(x = "Gender",
     y = "Finishing Time (hours)" )+
    theme_minimal(base_size = 14)
```

::: callout-note
This figure compares the distribution of marathon finishing times between male and female runners. It clearly shows that female runners tend to have longer finishing times than male runners.
:::

```{r}
ggplot(nyc_marathon_clean, aes(x = division,y = time_hrs, fill = division))+
  geom_boxplot(show.legend = FALSE)+
  scale_fill_manual(values = c("Blue","Red"))+
   labs(x = "Gender",
     y = "Finishing Time (hours)" )+
    theme_minimal(base_size = 14)
```

::: callout-note
Since the gender information is already clearly labeled on the x-axis, the color legend becomes redundant. Removing the legend increases the data-to-ink ratio by reducing unnecessary visual elements.
:::

```{r}
ggplot(nyc_marathon_clean, aes(x = year,y = time_hrs, color   = division,shap = division))+
  geom_point(stat = "summary", fun = "mean")+
  scale_color_manual(values = c("Blue","Red")) +
  scale_shape_manual(values = c("5","7")) +
   labs(x = "year",
    y = "Finishing Time (hours)",
    color = "Gender",
    shape = "Gender")+
    theme_minimal(base_size = 14)
```

::: callout-note
The plot shows how marathon finishing times have changed over the past decades. It reveals a notable downward trend in finishing times for both men and women. Additionally, men consistently finished faster than women throughout the recorded years.
:::

## 3 - US counties

::: callout-note
A.  

“geom_point(aes(x = median_edu, y = median_hh_income))”

This line creates a scatter plot to show the relationship between median years of education and median household income across U.S. counties.

“geom_boxplot(aes(x = smoking_ban, y = pop2017))”

This line creates a boxplot showing the distribution of 2017 population sizes grouped by smoking ban status.

However, combining these two plots doesn't make sense because they use different x-axes: one is a continuous variable (median_edu) and the other is a categorical variable (smoking_ban).
:::

::: callout-note
B.  

The second plot makes it much easier to compare poverty levels across people from different median education levels. This is because all four groups share the same y-axis scale (poverty), which facilitates direct visual comparison.

This suggests that when your goal is to compare values on the y-axis, you should place the faceting variable across columns to keep the y-axis consistent. Conversely, if you are focusing on comparisons along the x-axis, it's better to facet across rows.
:::

```{r}
library(openintro)
glimpse(county)  
```

```{r}
county_clean <- county |>
  filter(!is.na(homeownership),!is.na(poverty))

ggplot(county_clean, aes(x = homeownership, y = poverty))+
  geom_point()+
  labs(title = "Plot A") 
  
ggplot(county_clean, aes(x = homeownership, y = poverty))+
  geom_point()+
  geom_smooth(method = "gam", se = FALSE, color = "Blue")+
  labs(title = "Plot B") 

ggplot(county_clean, aes(x = homeownership, y = poverty, group = metro))+
  geom_point()+
  geom_smooth(method = "gam",se = FALSE, color = "Green")+
  labs(title = "Plot C") 

ggplot(county_clean, aes(x = homeownership, y = poverty, group = metro))+
  geom_smooth(method = "gam", se = FALSE, color = "Blue")+
  geom_point()+
  labs(title = "Plot D") 

ggplot(county_clean, aes(x = homeownership, y = poverty, group = metro))+
  geom_point(aes(color = metro))+
  geom_smooth(method = "gam", se = FALSE, color = "Blue", aes(linetype = metro))+
  guides(color = guide_legend(order = 2),    
    linetype = guide_legend(order = 1)) +
  labs(title = "Plot E") 

ggplot(county_clean, aes(x = homeownership, y = poverty, group = metro, color =   metro))+
  geom_point()+
  geom_smooth(method = "gam", se = FALSE, )+
  labs(title = "Plot F") 

ggplot(county_clean, aes(x = homeownership, y = poverty))+
  geom_point(aes(group = metro, color = metro))+
  geom_smooth(method = "gam",  se = FALSE, color = "Blue")+
  labs(title = "Plot G") 

ggplot(county_clean, aes(x = homeownership, y = poverty))+
  geom_point(aes(group = metro, color = metro))+
  labs(title = "Plot H") 

```

## 4 - Rental apartments in SF

```{r}
credit <- read_csv(here("data","credit.csv"))
glimpse(credit)
```

```{r}
library(scales)

ggplot(credit, aes(x = income,y = balance, color = student, shape = student ))+
  geom_point(alpha = 0.6,show.legend = FALSE)+
  geom_smooth(method = "lm", se = FALSE, show.legend = FALSE)+
  labs(x = "Income", y = "Credit card balance")+
  facet_grid(student ~ married, labeller = label_both)+
  scale_x_continuous(labels = dollar_format(prefix = "$", suffix = "K"))+
  scale_y_continuous(labels = dollar_format(prefix = "$"))+
  theme_minimal(base_size = 14) +
  theme( strip.background = element_rect(fill = "grey90"),
         panel.border = element_rect(color = "Black", fill = NA))
 
```

::: callout-note
This figure illustrates the relationship between income and credit card balance, segmented by student status and marital status. Overall, there is a positive correlation between income and credit card balance. Compared to non-students, students tend to carry higher credit card balances at similar income levels. Among students, married individuals generally have lower balances than their unmarried peers with comparable incomes.
:::

::: callout-note
I believe that marital status and student status are useful predictors, in addition to income, for predicting credit card balance. Students tend to have higher credit card balances than non-students at similar income levels. Additionally, married individuals generally have lower balances than unmarried individuals, which suggests a potential interaction effect between marital status and student status.
:::

```{r}
library(scales)

credit <- credit|>
  mutate(credit_utilization = balance/limit)
    
ggplot(credit, aes(x = income,y = credit_utilization, color = student, shape = student ))+
  geom_point(alpha = 0.6,show.legend = FALSE)+
  geom_smooth(method = "lm", se = FALSE, show.legend = FALSE)+
  labs(x = "Income", y = "Credit utilization")+
  facet_grid(student ~ married, labeller = label_both)+
  scale_x_continuous(labels = dollar_format(prefix = "$", suffix = "K"))+
  scale_y_continuous(labels = label_percent(suffix = "%"))+
  theme_minimal(base_size = 14) +
  theme( strip.background = element_rect(fill = "grey90"),
         panel.border = element_rect(color = "Black", fill = NA))
```

::: callout-note
The relationships between income and credit utilization differ from those between income and credit card balance. Among non-students, income and credit utilization show a positive correlation, consistent with the pattern observed for credit card balance. However, for student groups, the correlation between income and credit utilization appears to follow an opposite trend compared to the relationship with credit card balance. Additionally, married individuals generally have lower credit utilization than unmarried individuals at similar income levels.
:::

## 5 - Napoleon’s march.

```{r}



napoleon <- read_rds(here("data","napoleon.rds"))
cities <- napoleon$cities
temps <- napoleon$temperatures
troops <- napoleon$troops                
glimpse(cities)
glimpse(temps)
glimpse(troops)
```

```{r}
library(ggrepel)
library(cowplot)
library(grid)

temps <- temps %>%
  mutate(nice.label = paste0(temp, "°C"))

march.1812.plot.simple <- ggplot() +
  geom_path(data = troops, aes(x = long, y = lat, group = group,
                               color = direction, size = survivors),
            lineend = "round") +
  geom_point(data = cities, aes(x = long, y = lat),
             color = "#DC5B44") +
  geom_text_repel(data = cities, aes(x = long, y = lat, label = city),
                  color = "#DC5B44", family = "sans") +
  scale_size(range = c(0.5, 10)) +
  scale_colour_manual(values = c("advancing" = "#DFC17E", "retreating" = "#252523")) +
  guides(color = "none", size = "none") +
  theme_void()

temps.1812.plot <- ggplot(data = temps, aes(x = long, y = temp)) +
  geom_line() +
  geom_label(aes(label = nice.label),
             family = "sans", size = 2.5) +
  labs(x = NULL, y = "° Celsius") +
  scale_x_continuous(limits = ggplot_build(march.1812.plot.simple)$layout$panel_params[[1]]$x.range) +
  scale_y_continuous(position = "right") +
  coord_cartesian(ylim = c(-35, 5)) +
  theme_bw(base_family = "sans") +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        panel.grid.minor.y = element_blank(),
        axis.text.x = element_blank(), axis.ticks = element_blank(),
        panel.border = element_blank())

both.1812.plot.simple <- rbind(ggplotGrob(march.1812.plot.simple),
                               ggplotGrob(temps.1812.plot))

panels <- both.1812.plot.simple$layout$t[grep("panel", both.1812.plot.simple$layout$name)]
both.1812.plot.simple$heights[panels] <- unit(c(3, 1), "null")

grid.newpage()
grid.draw(both.1812.plot.simple)

```

::: callout-note
I adapted and reproduced the Napoleon’s March plot using code from the following blog post:

Andrew Heiss – Exploring Minard’s 1812 Plot with ggplot2

<https://www.andrewheiss.com/blog/2017/08/10/exploring-minards-1812-plot-with-ggplot2/>

This resource provided a solid foundation for understanding how to structure the plot using ggplot2. I made several modifications for clarity and styling purposes.
:::

::: callout-note
1\. Used read_rds() and here() to locate and read the data file.

2\. Used glimpse() to examine the structure of all three datasets.

3\. Loaded the required libraries: ggrepel, cowplot, and grid.

4\. Added a new column nice.label to the temps dataset to append a degree symbol to the temperature values.

5\. Created the troop movement plot.

6\. Used geom_path() to draw troop movement paths. The x-axis represents longitude and the y-axis represents latitude. Line color indicates direction (advancing or retreating), and line width reflects the number of survivors.

7.Used geom_point() to add city locations.

8\. Used geom_text_repel() to label cities with non-overlapping text.

9\. Used scale_size() to control minimum and maximum line thickness.

10. Used scale_colour_manual() to assign colors for advancing and retreating directions.
11. Created the temperature plot.
12. Used geom_line() to draw a line connecting temperature points based on longitude.
13. Used geom_label() to annotate temperature values using the nice.label column.
14. Used labs() to set the y-axis label.
15. Used scale_x_continuous() and scale_y_continuous() to align the axes and move the y-axis to the right.

16\. Used coord_cartesian() to set the y-axis viewing range between -35 and 5 degrees Celsius.

17. Used theme_bw() and additional theme() settings to remove grid lines, axis ticks, labels, and panel borders for a clean appearance.

18\. Combined the two plots using ggplotGrob() and rbind(), and adjusted their relative heights with unit(c(3, 1), "null").
:::

```{r}
library(ggrepel)
library(cowplot)
library(grid)

temps <- temps %>%
  mutate(nice.label = paste0(temp, "°C"))

march.1812.plot.simple <- ggplot() +
  geom_path(data = troops, aes(x = long, y = lat, group = group,
                               color = direction, size = survivors),
            lineend = "round") +
  geom_point(data = cities, aes(x = long, y = lat),
             color = "#5E9CA0") +
  geom_text_repel(data = cities, aes(x = long, y = lat, label = city),
                  color = "#5E9CA0", family = "sans") +
  scale_size(range = c(0.5, 10)) +
  scale_colour_manual(values = c("advancing" = "#DFA18E", "retreating" = "#254523")) +
  guides(color = "none", size = "none") +
  labs(title = "Napoleon’s march in ggplot2")+
  theme_void()

temps.1812.plot <- ggplot(data = temps, aes(x = long, y = temp)) +
  geom_line() +
  geom_label(aes(label = nice.label),
             family = "sans", size = 2.5, fill = "lightgreen") +
  labs(x = NULL, y = "° Celsius") +
  scale_x_continuous(limits = ggplot_build(march.1812.plot.simple)$layout$panel_params[[1]]$x.range) +
  scale_y_continuous(position = "right") +
  coord_cartesian(ylim = c(-35, 5)) +
  theme_bw(base_family = "sans") +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        panel.grid.minor.y = element_blank(),
        axis.text.x = element_blank(), axis.ticks = element_blank(),
        panel.border = element_blank())

both.1812.plot.simple <- rbind(ggplotGrob(march.1812.plot.simple),
                               ggplotGrob(temps.1812.plot))
  

panels <- both.1812.plot.simple$layout$t[grep("panel", both.1812.plot.simple$layout$name)]
both.1812.plot.simple$heights[panels] <- unit(c(3, 1), "null")

grid.newpage()
grid.draw(both.1812.plot.simple)
```
